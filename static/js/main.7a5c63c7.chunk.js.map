{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isFetching","data","resultData","map","_ref","beersDonated","amount","beersRedeemed","redeemed","beersAvailable","createdDate","Number","Date","sortBy","max","length","min","_this2","fetch","then","result","json","formatData","setState","objectSpread","react_default","a","createElement","className","victory_chart","padding","top","bottom","left","right","containerComponent","victory_voronoi_container","voronoiDimension","labels","d","concat","dateFormat","labelComponent","victory_tooltip","style","fontSize","victory_legend","x","y","orientation","border","stroke","title","fill","name","symbol","victory_axis","tickCount","tickFormat","t","axis","axisLabel","strokeWidth","ticks","tickLabels","dependentAxis","victory_line","parent","target","rel","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a5c63c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// import stubData from './stubData';\nimport dateFormat from 'dateformat';\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryLegend, VictoryVoronoiContainer, VictoryTooltip} from 'victory';\nimport sortBy from 'lodash/sortBy';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // const resultData = this.formatData(stubData);\n    // this.state = {\n    //   isFetching: true,\n    //   ...resultData,\n    // };\n    this.state = {isFetching: true};\n  }\n\n  formatData(data) {\n    let resultData = data.map(({beersDonated, amount, beersRedeemed, redeemed, beersAvailable, createdDate}) => {\n      return {\n        beersDonated: Number(beersDonated),\n        amount: Number(amount),\n        beersRedeemed: Number(beersRedeemed),\n        redeemed: Number(redeemed),\n        beersAvailable: Number(beersAvailable),\n        createdDate: new Date(createdDate),\n      }\n    });\n    resultData = sortBy(resultData, ['createdDate']);\n    return {\n      data: resultData,\n      max: resultData[resultData.length - 1],\n      min: resultData[0],\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://9udgrybxqa.execute-api.us-east-1.amazonaws.com/dev/data')\n    .then((result) => result.json())\n    .then((data) => {\n      const resultData = this.formatData(data);\n      this.setState({\n        isFetching: false,\n        ...resultData,\n      });\n    })\n  }\n\n  render() {\n    if (this.state.isFetching) {\n      return <div className=\"App\"><header className=\"App-header\">Loading</header></div>;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"graph\">\n            <VictoryChart\n              padding={{ top: 10, bottom: 30, left: 40, right: 40 }}\n              containerComponent={\n                <VictoryVoronoiContainer voronoiDimension=\"sdf\"\n                  labels={(d) => `${dateFormat(new Date(d.createdDate), \"m/d h:MMT\")}-${d.beersAvailable}/${d.beersRedeemed}`}\n                  labelComponent={<VictoryTooltip style={{fontSize: 8}}/>}\n                />\n              }\n            >\n              <VictoryLegend x={50} y={10}\n                orientation=\"vertical\"\n                padding={20}\n                style={{\n                  border: { stroke: \"white\"},\n                  title: {fontSize: 10, fill: \"white\" } }\n                }\n                data={[\n                  { name: \"Available\", symbol: { fill: \"0000ff\" }, labels: { fontSize: 10, fill: \"white\" }},\n                  { name: \"Redeemed\", symbol: { fill: \"800000\" }, labels: { fontSize: 10, fill: \"white\" } }\n                ]}\n              />\n              <VictoryAxis\n                tickCount= {4}\n                tickFormat={(t) => dateFormat(new Date(t), \"m/d/yy\")}\n                style={{\n                  axis: {stroke: \"white\"},\n                  axisLabel: {stroke: \"white\", fill: \"white\", strokeWidth: 0, fontSize: 10},\n                  ticks: {stroke: \"white\"},\n                  tickLabels: {stroke:\"white\", fill: \"white\", strokeWidth: 0, fontSize: 10}\n                }}\n              />\n              <VictoryAxis dependentAxis\n                tickCount= {8}\n                style={{\n                  axis: {stroke: \"white\"},\n                  axisLabel: {stroke: \"white\", fill: \"white\", strokeWidth: 0, fontSize: 10},\n                  ticks: {stroke: \"white\"},\n                  tickLabels: {stroke:\"white\", fill: \"white\", strokeWidth: 0, fontSize: 10}\n                }}\n              />\n              <VictoryLine\n                style={{\n                  data: { stroke: \"#800000\" },\n                  parent: { border: \"1px solid #ccc\"}\n                }}\n                data={this.state.data} x=\"createdDate\" y=\"beersRedeemed\"/>\n              <VictoryLine\n                style={{\n                  data: { stroke: \"#0000ff\" },\n                  parent: { border: \"1px solid #ccc\"}\n                }}\n                data={this.state.data} x=\"createdDate\" y=\"beersAvailable\"/>\n            </VictoryChart>\n          </div>\n          <p>\n            Let's trend the beers consumed vs beers available!\n          </p>\n          <footer>Data from <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://payitfurloughed.com\">payitfurloughed.com</a></footer>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}